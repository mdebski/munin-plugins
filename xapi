#!/usr/bin/python
# -*- coding: utf8 -*-
#
# Munin plugin to graph CPU load and memory usage on XenServer
#
# author: Maciej DÄ™bski <winemore@staszic.waw.pl>
# Based on check_xapi.py nagios plugin by danievanzyl

import XenAPI
import parse_rrd
import sys
import time

class Resource:
    def __init__(self, cur, max):
        self.cur = float(cur)
        self.max = float(max)
    def div(self):
        return float(self.cur)/float(self.max)
    def percentage(self):
        return self.div()*100
    def __str__(self):
        return "Used %f of %f (%f %%)" % (self.cur, self.max, self.percentage())

class checkXAPI:
    def __init__(self):
        self.params = {}
        self.url = "http://localhost"
        self.x = XenAPI.xapi_local()
  
        try:
            self.x.login_with_password("root","password")
            self.xapi = self.x.xenapi
            self.rrd_updates = parse_rrd.RRDUpdates()
            self.params['cf'] = "AVERAGE"
            self.params['start'] = int(time.time()) - 10
            self.params['interval'] = 5
            self.params['host'] = "true"

            self.rrd_updates.refresh(self.x.handle, self.params, self.url)
        finally:
            self.x.logout()

    def latest_host_data(self,**key):
        host_uuid = self.rrd_updates.get_host_uuid()
        v = []
        for k in key:
            if k == "cpu":
                cpu_num = key["cpu"]
                paramList = []
                for i in range(cpu_num):
                    paramList.append("cpu"+str(i))
            if k == "memory":
                paramList = ["memory_total_kib","memory_free_kib"]

        for param in self.rrd_updates.get_host_param_list():
            if param in paramList:
                max_time=0
                data=""
                for row in range(self.rrd_updates.get_nrows()):
                    epoch = self.rrd_updates.get_row_time(row)
                    dv = str(self.rrd_updates.get_host_data(param,row))
                    if epoch > max_time:
                        max_time = epoch
                        data = dv
                v.append(float(data))
        return v

    def get_memory(self):
        mem = self.latest_host_data(memory="true")
        return Resource(1024*(mem[0]-mem[1]), 1024*mem[0])

    def get_cpu(self):
        cpu = self.latest_host_data(cpu=len(self.xapi.host_cpu.get_all()))
        total=sum(map(float, cpu))
        return Resource(total, len(cpu))

check = checkXAPI()

def main():
    print "multigraph xen_mem"
    print "mem.value %f" % check.get_memory().cur
    print "multigraph xen_cpu"
    print "cpu.value %f" % check.get_cpu().cur

def config():
    print """
multigraph xen_cpu
graph_title Cpu Load
graph_args --base 1000 --rigid --lower-limit 0 --upper-limit %f
graph_vlabel Load
graph_category xen
graph_info Total load of all cpus

cpu.label Load
cpu.min 0
cpu.max %f
cpu.draw AREA""" % (check.get_cpu().max, check.get_cpu().max)

    print """
multigraph xen_mem
graph_title Memory
graph_args --base 1024 --rigid --lower-limit 0 --upper-limit %f
graph_vlabel Memory
graph_category xen
graph_info Memory

mem.label Used
mem.min 0
mem.max %f
mem.draw AREA""" % (check.get_memory().max, check.get_memory().max)

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "config":
        config()
    else:
        main()
