#!/usr/bin/python
# -*- coding: utf8 -*-
#
# Munin plugin to graph CPU load and memory usage on XenServer
#
# author: Maciej DÄ™bski <winemore@staszic.waw.pl>
# Based on check_xapi.py nagios plugin by danievanzyl

import XenAPI
import parse_rrd
import sys
import time

from munin import MultiGraphs, Graph, Item

class Resource:
    def __init__(self, cur, max):
        self.cur = float(cur)
        self.max = float(max)
    def div(self):
        return float(self.cur)/float(self.max)
    def percentage(self):
        return self.div()*100
    def __str__(self):
        return "Used %f of %f (%f %%)" % (self.cur, self.max, self.percentage())

class checkXAPI:
    def __init__(self):
        self.params = {}
        self.url = "http://localhost"
        self.x = XenAPI.xapi_local()
  
        try:
            self.x.login_with_password("root","password")
            self.xapi = self.x.xenapi
            self.rrd_updates = parse_rrd.RRDUpdates()
            self.params['cf'] = "AVERAGE"
            self.params['start'] = int(time.time()) - 10
            self.params['interval'] = 5
            self.params['host'] = "true"

            self.rrd_updates.refresh(self.x.handle, self.params, self.url)
        finally:
            self.x.logout()

    def latest_host_data(self, **key):
        v = []
        for k in key:
            if k == "cpu":
                cpu_num = key["cpu"]
                paramList = []
                for i in range(cpu_num):
                    paramList.append("cpu"+str(i))
            if k == "memory":
                paramList = ["memory_total_kib","memory_free_kib"]

        for param in self.rrd_updates.get_host_param_list():
            if param in paramList:
                max_time = 0
                data = ""
                for row in range(self.rrd_updates.get_nrows()):
                    epoch = self.rrd_updates.get_row_time(row)
                    dv = str(self.rrd_updates.get_host_data(param, row))
                    if epoch > max_time:
                        max_time = epoch
                        data = dv
                v.append(float(data))
        return v

    def get_memory(self):
        mem = self.latest_host_data(memory="true")
        return Resource(1024*(mem[0]-mem[1]), 1024*mem[0])

    def get_cpu(self):
        cpu = self.latest_host_data(cpu=len(self.xapi.host_cpu.get_all()))
        total = sum([float(c) for c in cpu])
        return Resource(total, len(cpu))

check = checkXAPI()

m = MultiGraphs()
g = Graph('xen_cpu', title='Cpu Load', args='--base 1000 --rigid ' \
          '--lower-limit 0 --upper-limit %f' % check.get_cpu().max,
          category='xen', vlabel='Load', info='Total load of all cpus')
g.append(Item('cpu', label='Load', min='0', max='%f' % check.get_cpu().max,
              draw='AREA'))
m.append(g)
g = Graph('xen_mem', title='Memory', vlabel='Memory', category='xen',
          info='Memory', args='--base 1024 --rigid --lower-limit 0 ' \
          '--upper-limit %f' % check.get_memory().max)
g.append(Item('mem', label='Used', min='0', draw='AREA',
              max='%f' % check.get_memory().max))
m.append(g)

def main():
    m.set_value('mem', check.get_memory().cur)
    m.set_value('cpu', check.get_cpu().cur)
    m.print_value()

def config():
    m.print_config()

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "config":
        config()
    else:
        main()
